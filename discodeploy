#!/bin/bash
#
# Usage: discodeploy [--help] [--deploy | --create-pull-secret | --undeploy]
#   

export USAGE="discodeploy [--help] [--deploy | --create-pull-secret | --undeploy]"

export OCP_SERVER="${OCP_SERVER:=api.crc.testing:6443}"
export OCP_USER="${OCP_USER:=developer}"
export OCP_PASSWORD="${OCP_PASSWORD:=developer}"

export DISCOVERY_NAMESPACE="${DISCOVERY_NAMESPACE:=discovery}"
export APPLICATION_DOMAIN_SUFFIX="${APPLICATION_DOMAIN_SUFFIX:=apps-crc.testing}"

export DJANGO_SECRET_KEY="${DJANGO_SECRET_KEY:=}"

export DISCOVERY_REGISTRY="${DISCOVERY_REGISTRY:=quay.io}"
export REGISTRY_USER="${REGISTRY_USER:=quipucords}"
export REGISTRY_PASSWORD="${REGISTRY_PASSWORD:=}"
export REGISTRY_EMAIL="${REGISTRY_EMAIL:=}"

export QUIPUCORDS_IMAGE="quipucords"
export QUIPUCORDS_IMAGE_TAG="${QUIPUCORDS_IMAGE_TAG:=latest}"

export DISCOVERY_PULL_SECRET="discovery-pull-secret"
export UPDATE_PULL_SECRET="no"

# Helper proc to simply exit the script any of the OCP/Registry commands 
function cmdexec {
  "$@"
  ec=$?
  [[ $ec -ne 0 ]] && echo "command $* failed: exit code $ec" && exit $ec
}

# Let's display and allow for updates to environment variables
function varupd {
  var=$(echo "$1" | tr '[a-z]' '[A-Z]')
  if [[ "${var}" == *"PASS"* || "${var}" == *"KEY" ]]; then
    echo -n "${var} ($(echo "${!var}" | sed 's/./*/g')): "
    read -rs value
    echo ""
  else
    echo -n "${var} (${!var}): "
    read -r value
  fi
  [[ -n "${value}" ]] && export "${1}"="${value}"
}

function default_registry_email {
  if [ -z "${REGISTRY_EMAIL}" ]
  then
    export REGISTRY_EMAIL="${REGISTRY_USER}@redhat.com"
  fi
}

function get_registry_password_and_email {
  varupd REGISTRY_PASSWORD
  default_registry_email
  varupd REGISTRY_EMAIL
}

function get_env_create_pull_secret {
  varupd OCP_SERVER
  varupd OCP_USER
  varupd OCP_PASSWORD
  varupd DISCOVERY_NAMESPACE
  varupd REGISTRY_USER
  get_registry_password_and_email
}

function get_env_deploy {
  varupd OCP_SERVER
  varupd OCP_USER
  varupd OCP_PASSWORD
  varupd DISCOVERY_NAMESPACE
  varupd APPLICATION_DOMAIN_SUFFIX
  export APPLICATION_DOMAIN="discovery-server-${DISCOVERY_NAMESPACE}.${APPLICATION_DOMAIN_SUFFIX}"
  varupd APPLICATION_DOMAIN
  varupd DISCOVERY_REGISTRY
  varupd QUIPUCORDS_IMAGE_TAG
  export DISCOVERY_SERVER_IMAGE="${DISCOVERY_REGISTRY}/quipucords/${QUIPUCORDS_IMAGE}:${QUIPUCORDS_IMAGE_TAG}"
  varupd DISCOVERY_SERVER_IMAGE
  varupd DJANGO_SECRET_KEY
  varupd REGISTRY_USER
}

function get_env_undeploy {
  varupd OCP_SERVER
  varupd OCP_USER
  varupd OCP_PASSWORD
  varupd DISCOVERY_NAMESPACE
}

function discovery_pull_secret_exists {
  oc get secrets/"${DISCOVERY_PULL_SECRET}" -n "${DISCOVERY_NAMESPACE}" >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "yes"
  else
    echo "no"
  fi
}

# Let's create or update the discovery pull secret
function cmd_create_pull_secret {
  DISCOVERY_PULL_SECRET_JSON="/tmp/qpc_pull_secret_$$.json"

  CONFIG_JSON=$(cat - <<!END!
{
  "auths" :
    {
      "${DISCOVERY_REGISTRY}" : {
        "username" : "${REGISTRY_USER}",
        "password" : "${REGISTRY_PASSWORD}",
        "email"    : "${REGISTRY_EMAIL}"
      }
    }
}
!END!
)
  echo "Creating the Discovery pull secret ${DISCOVERY_PULL_SECRET} ..."

  echo "${CONFIG_JSON}" > "${DISCOVERY_PULL_SECRET_JSON}"

  if [ "$(discovery_pull_secret_exists)" == "no" ]
  then
    cmdexec oc create secret generic "${DISCOVERY_PULL_SECRET}" --from-file=.dockerconfigjson="${DISCOVERY_PULL_SECRET_JSON}" \
      --type=kubernetes.io/dockerconfigjson -n "${DISCOVERY_NAMESPACE}"
  else
    cmdexec oc create secret generic "${DISCOVERY_PULL_SECRET}" --from-file=.dockerconfigjson="${DISCOVERY_PULL_SECRET_JSON}" \
      --type=kubernetes.io/dockerconfigjson -n "${DISCOVERY_NAMESPACE}" --dry-run=client -o yaml | oc replace -n "${DISCOVERY_NAMESPACE}" -f -
  fi

  # Zap the pull secret config json
  rm -f "${DISCOVERY_PULL_SECRET_JSON}"

  # Link to the Default and Deployers servive accounts.
  for sa in "default" "deployer"
  do
    oc get sa/${sa} >/dev/null 2>&1
    if [ $? -eq 0 ]
    then
    echo "Linking the ${DISCOVERY_PULL_SECRET} to the ${sa} service_account ..."
       oc secrets link "${sa}" "${DISCOVERY_PULL_SECRET}" --for=pull
    fi
  done
}

function cmd_deploy {
  # Let's confirm stuff ...
  echo ""
  echo "About to deploy Discovery image \"${DISCOVERY_SERVER_IMAGE}\" to \"${OCP_SERVER}\""
  echo -n "as user \"${OCP_USER}\" to project \"${DISCOVERY_NAMESPACE}\" namespace (y/n)? " 
  read -r a

  [[ ! "${a}" == "y" ]] && echo "Aborting installation." && exit 1

  echo "Logging into the OpenShift cluster ${OCP_SERVER} ..."
  cmdexec oc login --username="${OCP_USER}" --password="${OCP_PASSWORD}" "${OCP_SERVER}"

  echo "Creating project ${DISCOVERY_NAMESPACE} ..."
  oc project "${DISCOVERY_NAMESPACE}" >/dev/null 2>&1
  if [ $? -ne 0 ]
  then
    oc new-project "${DISCOVERY_NAMESPACE}" \
      --display-name="${DISCOVERY_NAMESPACE}" \
      --description="Discovery Project ${DISCOVERY_NAMESPACE}"
  fi


  # If we don't have a discovery pull secret,
  # let's ask for the password and email and create one.
  if [ "$(discovery_pull_secret_exists)" == "no" ]
  then
    echo ""
    get_registry_password_and_email
    echo ""
    cmd_create_pull_secret
  fi
  cmdexec oc apply -f discovery_template.yaml
  if [ -z "${DJANGO_SECRET_KEY}" ]
  then
    cmdexec oc new-app --template=discovery \
      --param=DISCOVERY_SERVER_IMAGE="${DISCOVERY_SERVER_IMAGE}" \
      --param=DISCOVERY_NAMESPACE="${DISCOVERY_NAMESPACE}" \
      --param=APPLICATION_DOMAIN="${APPLICATION_DOMAIN}"
  else
    cmdexec oc new-app --template=discovery \
      --param=DISCOVERY_SERVER_IMAGE="${DISCOVERY_SERVER_IMAGE}" \
      --param=DISCOVERY_NAMESPACE="${DISCOVERY_NAMESPACE}" \
      --param=APPLICATION_DOMAIN="${APPLICATION_DOMAIN}" \
      --param=DJANGO_SECRET_KEY="$(echo "${DJANGO_SECRET_KEY}" | base64)"
  fi
  echo ""
  echo "Application Url: https://${APPLICATION_DOMAIN}"
}

function cmd_undeploy {
  # Let's confirm stuff ...
  echo ""
  echo "About to undeploy Discovery from \"${OCP_SERVER}\""
  echo -n "as user \"${OCP_USER}\" in project \"${DISCOVERY_NAMESPACE}\" namespace (y/n)? " 
  read -r a

  [[ ! "${a}" == "y" ]] && echo "Aborting un-installation." && exit 1

  echo "Logging into the OpenShift cluster ${OCP_SERVER} ..."
  cmdexec oc login --username="${OCP_USER}" --password="${OCP_PASSWORD}" "${OCP_SERVER}"

  cmdexec oc project "${DISCOVERY_NAMESPACE}"
  echo "Deleting Deployments ..."
  oc delete --ignore-not-found=true deployment/discovery-celery-worker
  oc delete --ignore-not-found=true deployment/discovery-server
  oc delete --ignore-not-found=true deployment/discovery-db
  oc delete --ignore-not-found=true deployment/discovery-redis
  echo "Deleting Services ..."
  oc delete --ignore-not-found=true services/discovery-server
  oc delete --ignore-not-found=true services/discovery-db
  oc delete --ignore-not-found=true services/discovery-redis
  echo "Deleting Routes ..."
  oc delete --ignore-not-found=true routes/discovery-server
  echo "Deleting Physical Volume Claims ..."
  oc delete --ignore-not-found=true pvc/discovery-data-volume-claim
  oc delete --ignore-not-found=true pvc/discovery-log-volume-claim
  echo "Deleting Service Accounts ..."
  oc delete --ignore-not-found=true sa/discovery-sa
  echo "Deleting Discovery Secrets ..."
  oc delete --ignore-not-found=true secrets/discovery-secrets
  echo "Deleting Discovery Template ..."
  oc delete --ignore-not-found=true -f discovery_template.yaml
}

if [ "${1}" == "--deploy" ]
then
  shift
  echo "Discovery Deployer ..."
  echo ""
  get_env_deploy
  cmd_deploy
elif [ "${1}" == "--create-pull-secret" ]
then
  shift
  echo "Creating Discovery Registry Pull Secret ..."
  echo ""
  get_env_create_pull_secret
  cmd_create_pull_secret
elif [ "${1}" == "--undeploy" ]
then
  shift
  echo "Discovery UnDeployer ..."
  echo ""
  get_env_undeploy
  cmd_undeploy
elif [ "${1}" == "--help" ]
then
  cat <<END

Discovery (quipucords) Product Deployer script to OpenShift.
Deployer defaults are for OpenShift Local (CRC)

${USAGE}

  --deploy               Deploys the Discovery product to OpenShift

  --create-pull-secret   Recreates/Updates the pull secret created 
                         during a deploy.
  
  --undeploy             Undeploys Discovery from OpenShift.

Environment variables that are honored and prompted for (defaults):
    OCP_SERVER                 (api.crc.testing:6443)
    OCP_USER                   (developer)
    OCP_PASSWORD               (developer)
    DISCOVERY_NAMESPACE        (discovery)
    APPLICATION_DOMAIN_SUFFIX  (apps-crc.testing)
    DJANGO_SECRET_KEY          ()  Template default is: development
 
    DISCOVERY_REGISTRY         (quay.io)
    REGISTRY_USER              (quipucords)
    REGISTRY_PASSWORD          ()
    REGISTRY_EMAIL             (quipucords@redhat.com)
 
    QUIPUCORDS_IMAGE_TAG       (latest)
END
else
  echo "${USAGE}"
  exit 1
fi
